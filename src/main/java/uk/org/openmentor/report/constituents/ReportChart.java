/* =======================================================================
 * Copyright 2004-2006 The OpenMentor Team.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================================
 */

package uk.org.openmentor.report.constituents;

import java.io.IOException;
import java.io.OutputStream;

import org.jCharts.chartData.ChartDataException;
import org.jCharts.encoders.JPEGEncoder;
import org.jCharts.encoders.PNGEncoder;
import org.jCharts.properties.PropertyException;
import org.jCharts.Chart;

import uk.org.openmentor.businesslogic.BusinessLogicException;
import uk.org.openmentor.report.exceptions.ImageTypeNotSupportedException;


public abstract class ReportChart implements ChartConstituent {
    private static final int FIRST_SUBARRAY = 0;

    protected Chart chart;

    public ReportChart() {
        this.chart = null;
    }

    public void writeChartToStream(OutputStream out, String mime_type)
            throws ImageTypeNotSupportedException, BusinessLogicException {
        try {
            if (mime_type.equals(ChartConstituent.JPEG_MIME_TYPE)) {
                writeChartAsJPEG(out);
            } else if (mime_type.equals(ChartConstituent.PNG_MIME_TYPE)) {
                writeChartAsPNG(out);
            } else {
                throw new ImageTypeNotSupportedException("Invalid mime type "
                        + mime_type + "requested in JCChart::"
                        + "writeChartToStream()");
            }
        } catch (Exception e) {
            throw new BusinessLogicException(
                    "Error in JCChart::writeChartToStream() -"
                            + " Exception generated by jCharts:\n"
                            + e.getMessage());
        }
    }

    private void writeChartAsJPEG(OutputStream out) throws ChartDataException,
            PropertyException, IOException {
        JPEGEncoder.encode(this.chart, 1.0f, out);
    }

    private void writeChartAsPNG(OutputStream out) throws ChartDataException,
            PropertyException, IOException {
        PNGEncoder.encode(this.chart, out);
    }

    protected double[] convertData(int[] d) {
        double[] new_d = new double[d.length];

        for (int i = 0; i != d.length; ++i) {
            new_d[i] = d[i];
        }

        return new_d;
    }

    protected double[][] convertData(int[][] d) {
        double[][] new_d = new double[d.length][d[FIRST_SUBARRAY].length];

        for (int i = 0; i != d.length; ++i) {
            new_d[i] = convertData(d[i]);
        }

        return new_d;
    }
}
